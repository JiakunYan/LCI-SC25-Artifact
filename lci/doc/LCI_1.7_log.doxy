/*! \page LCI_1.7_log Development log for LCI v1.7

## New in v1.7
- new API (especially for memory registration and iovec)
- test infrastructure

## Decisions to be made
- `const` or `#define` or `enum`: which to use? Libfabric, MPICH, and Argobots both use `#define`. Why?
- The immediate data for libibverbs has only 32 bits. It remains unknown how to pass
  a handle to a completion object in remote memory.
  
### Design
#### LCII_context_t
  Asynchronous operations of Low-level communication engine use a 64-bit `context`
to pass information between the initialization and completion phases. For example,
if you want to send a message with Libfabric, you can call `fi_send`
```
ssize_t fi_send(struct fid_ep *ep, const void *buf, size_t len,
        void *desc, fi_addr_t dest_addr, void *context);
```
to initialize a send operation. Then, you will poll the completion queue with 
`fi_cq_read`.
```
ssize_t fi_cq_read(struct fid_cq *cq, void *buf, size_t count);
```
After a while, you will get a entry from the completion queue, such as
`fi_cq_tagged_entry`.
```
struct fi_cq_tagged_entry {
	void     *op_context; /* operation context */
	uint64_t flags;       /* completion flags */
	size_t   len;         /* size of received data */
	void     *buf;        /* receive data buffer */
	uint64_t data;        /* completion data */
	uint64_t tag;         /* received tag */
};
```
This entry indicate one of your previously issued asynchronous operations has been
completed. (For `fi_send`, this means it has been completed locally.) Usually, we want
to do something when an operation is completed, for example, we want to return the
message buffer to the buffer pool, so we need to know the buffer address. However, 
in Libfabric, we cannot always get the processed buffer address from the completion
entry.

> (https://ofiwg.github.io/libfabric/v1.11.2/man/fi_cq.3.html)
> The buf field is only valid for completed receive operations, and only applies 
> when the receive buffer was posted with the FI_MULTI_RECV flag. In this case, 
> buf points to the starting location where the receive data was placed.

As a result, we need to pass some additional information from the operation 
initialization phase to the operation completion phase. We could do this through the
`op_context` field.

> The operation context is the application specified context value that was provided
> with an asynchronous operation. The op_context field is valid for all completions 
> that are associated with an asynchronous operation. For completion events that 
> are not associated with a posted operation, this field will be set to NULL. 
> This includes completions generated at the target in response to RMA write 
> operations that carry CQ data (FI_REMOTE_WRITE | FI_REMOTE_CQ_DATA flags set), 
> when the FI_RX_CQ_DATA mode bit is not required.

The `op_context` field has 64 bits. How much information do we need to pass throw 
this field? Absolutely more than 64 bits. At least for local completion of send,
we need the buffer address and the buffer type, which needs at least 65 bits.

As a result, we need a `LCII_context_t` object that contains the information we
need, and pass the address of this object in the `op_context` field.

[comment]: <> (For local completion of sendm)

[comment]: <> (- the buffer address.)

[comment]: <> (- the buffer type: LCI-managed packet or user-managed buffer.)

[comment]: <> (- the completion mechanism: a way to report this completion to users)

[comment]: <> (    - synchronizer: the address of the synchronizer)

[comment]: <> (    - completion queue: the address of the queue)

[comment]: <> (    - handler: the address of the handler)

[comment]: <> (    - completion counter: the address of the counter)

[comment]: <> (Now the question)

[comment]: <> (is: what information do we need for processing this completion queue entry?)

[comment]: <> (For local completion &#40;send & recv & put & get&#41;:)

[comment]: <> (- buffer address: the starting address of the processed buffer.)

[comment]: <> (- buffer size: the size of the processed buffer.)

[comment]: <> (- a flag indicating the type of this buffer)

[comment]: <> (    - immediate data)

[comment]: <> (    - medium buffer managed by LCI)

[comment]: <> (    - long buffer managed by users)

[comment]: <> (    - iovec buffer managed by users)

[comment]: <> (- completion mechanism: a way to report this completion to users)

[comment]: <> (    - synchronizer: the address of the synchronizer)

[comment]: <> (    - completion queue: the address of the queue)

[comment]: <> (    - handler: the address of the handler)

[comment]: <> (    - completion counter: the address of the counter)

[comment]: <> (- &#40;optional&#41; memory segment: if it is a long buffer or iovec buffer, we need to )

[comment]: <> (  get its memory segment.)
  
[comment]: <> (For remote completion &#40;put on the target node&#41;:)

[comment]: <> (- buffer address: the starting address of the processed buffer.)

[comment]: <> (- buffer size: the size of the processed buffer.)

[comment]: <> (- tag: if this message is associated with a tag.)

[comment]: <> (- a flag indicating the type of this buffer)

[comment]: <> (    - immediate data)

[comment]: <> (    - medium buffer managed by LCI)

[comment]: <> (    - long buffer managed by users)

[comment]: <> (    - iovec buffer managed by users)

[comment]: <> (- completion mechanism: a way to report this completion to users)

[comment]: <> (    - synchronizer: the address of the synchronizer)

[comment]: <> (    - completion queue: the address of the queue)

[comment]: <> (    - handler: the address of the handler)

[comment]: <> (    - completion counter: the address of the counter)

[comment]: <> (- &#40;optional&#41; memory segment: if it is a long buffer or iovec buffer, we need to)

[comment]: <> (  get its memory segment.)
*/